-- MySQL Script generated by MySQL Workbench
-- Fri Aug  8 18:58:36 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema kllv_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema kllv_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `kllv_db` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ;
USE `kllv_db` ;

-- -----------------------------------------------------
-- Table `kllv_db`.`admin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`admin` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`admin` (
  `admin_id` VARCHAR(50) NOT NULL,
  `fullname` VARCHAR(50) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `created_at` DATETIME NOT NULL,
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`admin_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`users` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`users` (
  `user_id` VARCHAR(50) NOT NULL,
  `fullname` VARCHAR(50) NOT NULL,
  `nickname` VARCHAR(50) NULL,
  `password` VARCHAR(255) NOT NULL,
  `profile_image` VARCHAR(255) NOT NULL DEFAULT 'default image',
  `phone_number` VARCHAR(20) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `id_number` VARCHAR(20) NULL,
  `birth_date` DATE NULL,
  `gender` CHAR(1) NULL,
  `household_no` INT NULL,
  `role_type` TINYINT NULL DEFAULT 0,
  `is_active` TINYINT NOT NULL DEFAULT 0,
  `is_deleted` TINYINT NOT NULL DEFAULT 0,
  `created_at` DATETIME NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) ,
  INDEX `household_code_idx` (`household_no` ASC) ,
  CONSTRAINT `fk_users_household_no`
    FOREIGN KEY (`household_no`)
    REFERENCES `kllv_db`.`users_households` (`household_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`users_households`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`users_households` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`users_households` (
  `household_no` INT NOT NULL AUTO_INCREMENT,
  `address` VARCHAR(255) NOT NULL,
  `creator_id` VARCHAR(50) ,
  `status` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`household_no`),
  INDEX `user_id_idx` (`creator_id` ASC) ,
  CONSTRAINT `fk_users_households_creator_id`
    FOREIGN KEY (`creator_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`village_chief`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`village_chief` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`village_chief` (
  `chief_id` INT NOT NULL AUTO_INCREMENT,
  `fullname` VARCHAR(50) NOT NULL,
  `phone_number` VARCHAR(20) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `address` VARCHAR(255) NOT NULL,
  `profile_image` VARCHAR(255) NOT NULL DEFAULT 'default image',
  `introduction` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`chief_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`news_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`news_categories` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`news_categories` (
  `category_no` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`category_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`news`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`news` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`news` (
  `news_no` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(50) NOT NULL,
  `category_no` INT NOT NULL,
  `image` VARCHAR(255) NULL,
  `content` VARCHAR(1000) NOT NULL,
  `published_at` DATE NOT NULL,
  `status` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`news_no`),
  INDEX `category_no_idx` (`category_no` ASC) ,
  CONSTRAINT `fk_news_category_no`
    FOREIGN KEY (`category_no`)
    REFERENCES `kllv_db`.`news_categories` (`category_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`repair_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`repair_categories` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`repair_categories` (
  `category_no` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`category_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`repair`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`repair` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`repair` (
  `repair_no` INT NOT NULL AUTO_INCREMENT,
  `location` VARCHAR(255) NOT NULL,
  `category_no` INT NOT NULL,
  `description` VARCHAR(1000) NOT NULL,
  `reporter_id` VARCHAR(50) NOT NULL,
  `reported_at` DATE NOT NULL,
  `reply_content` VARCHAR(500) NULL,
  `resolved_at` DATE NULL,
  `status` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`repair_no`),
  INDEX `category_no_idx` (`category_no` ASC) ,
  INDEX `user_id_idx` (`reporter_id` ASC) ,
  CONSTRAINT `fk_repair_category_no`
    FOREIGN KEY (`category_no`)
    REFERENCES `kllv_db`.`repair_categories` (`category_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_repair_reporter_id`
    FOREIGN KEY (`reporter_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`repair_images`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`repair_images` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`repair_images` (
  `image_no` INT NOT NULL AUTO_INCREMENT,
  `repair_no` INT NOT NULL,
  `image_path` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`image_no`),
  INDEX `repair_no_idx` (`repair_no` ASC) ,
  CONSTRAINT `fk_repair_images_repair_no`
    FOREIGN KEY (`repair_no`)
    REFERENCES `kllv_db`.`repair` (`repair_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_posts_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_posts_categories` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_posts_categories` (
  `category_no` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`category_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_posts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_posts` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_posts` (
  `post_no` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(50) NOT NULL,
  `category_no` INT NOT NULL,
  `image` VARCHAR(255) NOT NULL DEFAULT 'default image',
  `content` VARCHAR(1000) NOT NULL,
  `author_id` VARCHAR(50) NOT NULL,
  `is_deleted` TINYINT NOT NULL DEFAULT 0,
  `posted_at` DATETIME NOT NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`post_no`),
  INDEX `user_id_idx` (`author_id` ASC) ,
  INDEX `category_id_idx` (`category_no` ASC) ,
  CONSTRAINT `fk_community_posts_category_no`
    FOREIGN KEY (`category_no`)
    REFERENCES `kllv_db`.`community_posts_categories` (`category_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_community_posts_author_id`
    FOREIGN KEY (`author_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_posts_images`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_posts_images` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_posts_images` (
  `image_no` INT NOT NULL AUTO_INCREMENT,
  `image_path` VARCHAR(255) NOT NULL,
  `post_no` INT NOT NULL,
  PRIMARY KEY (`image_no`),
  INDEX `post_no_idx` (`post_no` ASC) ,
  CONSTRAINT `fk_community_posts_images_post_no`
    FOREIGN KEY (`post_no`)
    REFERENCES `kllv_db`.`community_posts` (`post_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_comments` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_comments` (
  `comments_no` INT NOT NULL AUTO_INCREMENT,
  `post_no` INT NOT NULL,
  `content` VARCHAR(50) NOT NULL,
  `author_id` VARCHAR(50) NOT NULL,
  `is_deleted` TINYINT NOT NULL DEFAULT 0,
  `commented_at` DATETIME NOT NULL,
  PRIMARY KEY (`comments_no`),
  INDEX `post_no_idx` (`post_no` ASC) ,
  INDEX `user_id_idx` (`author_id` ASC) ,
  CONSTRAINT `fk_community_comments_post_no`
    FOREIGN KEY (`post_no`)
    REFERENCES `kllv_db`.`community_posts` (`post_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_community_comments_author_id`
    FOREIGN KEY (`author_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_posts_reports_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_posts_reports_categories` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_posts_reports_categories` (
  `category_no` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`category_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_posts_reports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_posts_reports` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_posts_reports` (
  `report_no` INT NOT NULL AUTO_INCREMENT,
  `post_no` INT NOT NULL,
  `category_no` INT NOT NULL,
  `reporter_id` VARCHAR(50) NOT NULL,
  `reported_at` DATETIME NOT NULL,
  `status` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`report_no`),
  INDEX `user_id_idx` (`reporter_id` ASC) ,
  INDEX `post_no_idx` (`post_no` ASC) ,
  INDEX `fk_community_posts_reports_category_no_idx` (`category_no` ASC) ,
  CONSTRAINT `fk_community_posts_reports_post_no`
    FOREIGN KEY (`post_no`)
    REFERENCES `kllv_db`.`community_posts` (`post_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_community_posts_reports_category_no`
    FOREIGN KEY (`category_no`)
    REFERENCES `kllv_db`.`community_posts_reports_categories` (`category_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_community_posts_reports_reporter_id`
    FOREIGN KEY (`reporter_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`community_comments_reports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`community_comments_reports` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`community_comments_reports` (
  `report_no` INT NOT NULL AUTO_INCREMENT,
  `comment_no` INT NOT NULL,
  `category_no` INT NOT NULL,
  `reporter_id` VARCHAR(50) NOT NULL,
  `reported_at` DATETIME NOT NULL,
  `status` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`report_no`),
  INDEX `user_id_idx` (`reporter_id` ASC) ,
  INDEX `comment_no_idx` (`comment_no` ASC) ,
  INDEX `fk_community_comments_reports_category_no_idx` (`category_no` ASC) ,
  CONSTRAINT `fk_community_comments_reports_comment_no`
    FOREIGN KEY (`comment_no`)
    REFERENCES `kllv_db`.`community_comments` (`comments_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_community_comments_reports_category_no`
    FOREIGN KEY (`category_no`)
    REFERENCES `kllv_db`.`community_posts_reports_categories` (`category_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_community_comments_reports_reporter_id`
    FOREIGN KEY (`reporter_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`events_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`events_categories` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`events_categories` (
  `category_no` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`category_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`events`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`events` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`events` (
  `event_no` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(100) NOT NULL,
  `location` VARCHAR(255) NOT NULL,
  `catetory_no` INT NOT NULL,
  `image` VARCHAR(255) NULL,
  `description` VARCHAR(1000) NOT NULL,
  `fee_per_person` INT NULL,
  `p_count` INT NULL,
  `p_limit` INT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  `reg_deadline` DATE NOT NULL,
  `created_at` DATE NOT NULL,
  `status` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`event_no`),
  INDEX `category_no_idx` (`catetory_no` ASC) ,
  CONSTRAINT `fk_events_category_no`
    FOREIGN KEY (`catetory_no`)
    REFERENCES `kllv_db`.`events_categories` (`category_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`events_regs_payments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`events_regs_payments` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`events_regs_payments` (
  `payment_no` INT NOT NULL AUTO_INCREMENT,
  `payment_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`payment_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`events_regs_cancel_reasons`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`events_regs_cancel_reasons` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`events_regs_cancel_reasons` (
  `reason_no` INT NOT NULL AUTO_INCREMENT,
  `reason_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`reason_no`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`events_regs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`events_regs` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`events_regs` (
  `reg_no` INT NOT NULL AUTO_INCREMENT,
  `event_no` INT NOT NULL,
  `participant_id` VARCHAR(50) NOT NULL,
  `p_total` INT NOT NULL,
  `fee_total` INT NULL,
  `payment_no` INT NULL,
  `cancel_reason_no` INT NULL,
  `registered_at` DATETIME NOT NULL,
  `status` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`reg_no`),
  INDEX `event_no_idx` (`event_no` ASC) ,
  INDEX `user_id_idx` (`participant_id` ASC) ,
  INDEX `payment_no_idx` (`payment_no` ASC) ,
  INDEX `cancel_reason_no_idx` (`cancel_reason_no` ASC) ,
  CONSTRAINT `fk_events_regs_event_no`
    FOREIGN KEY (`event_no`)
    REFERENCES `kllv_db`.`events` (`event_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_events_regs_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_events_regs_payment_no`
    FOREIGN KEY (`payment_no`)
    REFERENCES `kllv_db`.`events_regs_payments` (`payment_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_events_regs_cancel_reason_no`
    FOREIGN KEY (`cancel_reason_no`)
    REFERENCES `kllv_db`.`events_regs_cancel_reasons` (`reason_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `kllv_db`.`events_regs_plist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kllv_db`.`events_regs_plist` ;

CREATE TABLE IF NOT EXISTS `kllv_db`.`events_regs_plist` (
  `plist_no` INT NOT NULL AUTO_INCREMENT,
  `reg_no` INT NOT NULL,
  `participant_id` VARCHAR(50) NOT NULL,
  `phone_number` VARCHAR(20) NOT NULL,
  `id_number` VARCHAR(20) NOT NULL,
  `birth_date` DATETIME NOT NULL,
  `econtact_name` VARCHAR(50) NOT NULL,
  `econtact_phone` VARCHAR(20) NOT NULL,
  `econtact_relation` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`plist_no`),
  INDEX `order_no_idx` (`reg_no` ASC) ,
  INDEX `fk_events_regs_plists_participant_idx` (`participant_id` ASC) ,
  CONSTRAINT `fk_events_regs_plists_reg_no`
    FOREIGN KEY (`reg_no`)
    REFERENCES `kllv_db`.`events_regs` (`reg_no`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_events_regs_plists_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `kllv_db`.`users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `kllv_db`.`news_categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`news_categories` (`category_no`, `category_name`) VALUES (1, '公告');
INSERT INTO `kllv_db`.`news_categories` (`category_no`, `category_name`) VALUES (2, '活動');
INSERT INTO `kllv_db`.`news_categories` (`category_no`, `category_name`) VALUES (3, '補助');
INSERT INTO `kllv_db`.`news_categories` (`category_no`, `category_name`) VALUES (4, '施工');
INSERT INTO `kllv_db`.`news_categories` (`category_no`, `category_name`) VALUES (5, '防災');

COMMIT;


-- -----------------------------------------------------
-- Data for table `kllv_db`.`repair_categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`repair_categories` (`category_no`, `category_name`) VALUES (1, '路燈損壞');
INSERT INTO `kllv_db`.`repair_categories` (`category_no`, `category_name`) VALUES (2, '公共設施損壞');
INSERT INTO `kllv_db`.`repair_categories` (`category_no`, `category_name`) VALUES (3, '道路坑洞');
INSERT INTO `kllv_db`.`repair_categories` (`category_no`, `category_name`) VALUES (4, '其他');

COMMIT;


-- -----------------------------------------------------
-- Data for table `kllv_db`.`community_posts_categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`community_posts_categories` (`category_no`, `category_name`) VALUES (1, '舊物交換');
INSERT INTO `kllv_db`.`community_posts_categories` (`category_no`, `category_name`) VALUES (2, '生活抱怨');
INSERT INTO `kllv_db`.`community_posts_categories` (`category_no`, `category_name`) VALUES (3, '揪團來買');

COMMIT;


-- -----------------------------------------------------
-- Data for table `kllv_db`.`community_posts_reports_categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`community_posts_reports_categories` (`category_no`, `category_name`) VALUES (1, '仇恨言論');
INSERT INTO `kllv_db`.`community_posts_reports_categories` (`category_no`, `category_name`) VALUES (2, '暴力內容');
INSERT INTO `kllv_db`.`community_posts_reports_categories` (`category_no`, `category_name`) VALUES (3, '詐騙、不實資訊');
INSERT INTO `kllv_db`.`community_posts_reports_categories` (`category_no`, `category_name`) VALUES (4, '自我傷害、自殺');
INSERT INTO `kllv_db`.`community_posts_reports_categories` (`category_no`, `category_name`) VALUES (5, '霸凌、騷擾');

COMMIT;


-- -----------------------------------------------------
-- Data for table `kllv_db`.`events_categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`events_categories` (`category_no`, `category_name`) VALUES (1, '旅遊');
INSERT INTO `kllv_db`.`events_categories` (`category_no`, `category_name`) VALUES (2, '健康');
INSERT INTO `kllv_db`.`events_categories` (`category_no`, `category_name`) VALUES (3, '藝文');
INSERT INTO `kllv_db`.`events_categories` (`category_no`, `category_name`) VALUES (4, '其他');

COMMIT;


-- -----------------------------------------------------
-- Data for table `kllv_db`.`events_regs_payments`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`events_regs_payments` (`payment_no`, `payment_name`) VALUES (1, '信用卡');
INSERT INTO `kllv_db`.`events_regs_payments` (`payment_no`, `payment_name`) VALUES (2, '銀行轉帳');
INSERT INTO `kllv_db`.`events_regs_payments` (`payment_no`, `payment_name`) VALUES (3, '現金繳費');

COMMIT;


-- -----------------------------------------------------
-- Data for table `kllv_db`.`events_regs_cancel_reasons`
-- -----------------------------------------------------
START TRANSACTION;
USE `kllv_db`;
INSERT INTO `kllv_db`.`events_regs_cancel_reasons` (`reason_no`, `reason_name`) VALUES (1, '報錯活動 / 重複報名');
INSERT INTO `kllv_db`.`events_regs_cancel_reasons` (`reason_no`, `reason_name`) VALUES (2, '疫情 / 健康安全考量');
INSERT INTO `kllv_db`.`events_regs_cancel_reasons` (`reason_no`, `reason_name`) VALUES (3, '家庭因素');
INSERT INTO `kllv_db`.`events_regs_cancel_reasons` (`reason_no`, `reason_name`) VALUES (4, '工作安排');
INSERT INTO `kllv_db`.`events_regs_cancel_reasons` (`reason_no`, `reason_name`) VALUES (5, '對活動內容不感興趣了');
INSERT INTO `kllv_db`.`events_regs_cancel_reasons` (`reason_no`, `reason_name`) VALUES (6, '其他原因');

COMMIT;

-- -----------------------------------------------------
-- 如有新增資料並需要大家同步資料庫，請在這裡附上指令，並在群組通知~
-- -----------------------------------------------------